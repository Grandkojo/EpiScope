# Generated by Django 5.2.3 on 2025-08-06 23:46

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('disease_monitor', '0010_hospitalhealthdata_cost_of_treatment_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='PredictionHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prediction_id', models.CharField(help_text='Unique identifier for this prediction', max_length=50, unique=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('age', models.IntegerField()),
                ('gender', models.CharField(max_length=10)),
                ('locality', models.CharField(max_length=255)),
                ('schedule_date', models.DateField()),
                ('pregnant_patient', models.BooleanField(default=False)),
                ('nhia_patient', models.BooleanField(default=False)),
                ('vertex_ai_enabled', models.BooleanField(default=False)),
                ('disease_type', models.CharField(max_length=50)),
                ('symptoms_description', models.TextField()),
                ('predicted_disease', models.CharField(max_length=100)),
                ('confidence_score', models.FloatField()),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('confirmed', 'Confirmed'), ('corrected', 'Corrected'), ('discarded', 'Discarded')], default='pending', max_length=20)),
                ('actual_disease', models.CharField(blank=True, help_text='Actual disease diagnosed by doctor', max_length=100, null=True)),
                ('medicine_prescribed', models.TextField(blank=True, help_text='Medicine prescribed by doctor', null=True)),
                ('cost_of_treatment', models.DecimalField(blank=True, decimal_places=2, help_text='Cost of treatment in GHS', max_digits=10, null=True)),
                ('feedback_timestamp', models.DateTimeField(blank=True, help_text='When reinforcement data was submitted', null=True)),
                ('model_learning_score', models.FloatField(blank=True, help_text='Score for model learning (0-1)', null=True)),
                ('hospital_name', models.CharField(blank=True, max_length=255, null=True)),
                ('doctor_notes', models.TextField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='predictions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Prediction History',
                'verbose_name_plural': 'Prediction Histories',
                'db_table': 'prediction_history',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='PredictionFeedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('feedback_type', models.CharField(choices=[('accuracy', 'Accuracy Feedback'), ('treatment', 'Treatment Feedback'), ('cost', 'Cost Feedback'), ('general', 'General Feedback')], max_length=20)),
                ('feedback_text', models.TextField()),
                ('rating', models.IntegerField(blank=True, help_text='Rating from 1-5', null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('doctor_notes', models.TextField(blank=True, null=True)),
                ('patient_outcome', models.CharField(blank=True, max_length=100, null=True)),
                ('provided_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='provided_feedbacks', to=settings.AUTH_USER_MODEL)),
                ('prediction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feedbacks', to='disease_monitor.predictionhistory')),
            ],
            options={
                'verbose_name': 'Prediction Feedback',
                'verbose_name_plural': 'Prediction Feedbacks',
                'db_table': 'prediction_feedback',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='ReinforcementLearningData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('period_start', models.DateField()),
                ('period_end', models.DateField()),
                ('disease_type', models.CharField(max_length=50)),
                ('total_predictions', models.IntegerField(default=0)),
                ('confirmed_predictions', models.IntegerField(default=0)),
                ('corrected_predictions', models.IntegerField(default=0)),
                ('discarded_predictions', models.IntegerField(default=0)),
                ('avg_confidence_score', models.FloatField(default=0.0)),
                ('avg_learning_score', models.FloatField(default=0.0)),
                ('avg_cost_of_treatment', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('common_medicines', models.JSONField(default=list, help_text='List of commonly prescribed medicines')),
                ('medicine_frequency', models.JSONField(default=dict, help_text='Frequency of each medicine')),
                ('model_accuracy', models.FloatField(default=0.0)),
                ('model_precision', models.FloatField(default=0.0)),
                ('model_recall', models.FloatField(default=0.0)),
                ('model_f1_score', models.FloatField(default=0.0)),
                ('last_training_date', models.DateTimeField(blank=True, null=True)),
                ('training_data_count', models.IntegerField(default=0)),
            ],
            options={
                'verbose_name': 'Reinforcement Learning Data',
                'verbose_name_plural': 'Reinforcement Learning Data',
                'db_table': 'reinforcement_learning_data',
                'ordering': ['-period_end', 'disease_type'],
                'indexes': [models.Index(fields=['disease_type', 'period_end'], name='reinforceme_disease_0eed6c_idx'), models.Index(fields=['model_accuracy'], name='reinforceme_model_a_c14d14_idx')],
                'unique_together': {('period_start', 'period_end', 'disease_type')},
            },
        ),
        migrations.CreateModel(
            name='ModelTrainingSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_id', models.CharField(max_length=50, unique=True)),
                ('session_name', models.CharField(max_length=255)),
                ('disease_type', models.CharField(max_length=50)),
                ('model_type', models.CharField(help_text='Type of model (LSTM, ARIMA, etc.)', max_length=50)),
                ('training_parameters', models.JSONField(default=dict, help_text='Model training parameters')),
                ('data_period_start', models.DateField()),
                ('data_period_end', models.DateField()),
                ('training_data_count', models.IntegerField(default=0)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('running', 'Running'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('start_time', models.DateTimeField(auto_now_add=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('training_accuracy', models.FloatField(blank=True, null=True)),
                ('validation_accuracy', models.FloatField(blank=True, null=True)),
                ('test_accuracy', models.FloatField(blank=True, null=True)),
                ('model_file_path', models.CharField(blank=True, max_length=500, null=True)),
                ('scaler_file_path', models.CharField(blank=True, max_length=500, null=True)),
                ('training_logs', models.TextField(blank=True, null=True)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('initiated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Model Training Session',
                'verbose_name_plural': 'Model Training Sessions',
                'db_table': 'model_training_sessions',
                'ordering': ['-start_time'],
                'indexes': [models.Index(fields=['disease_type', 'status'], name='model_train_disease_d0b77d_idx'), models.Index(fields=['start_time'], name='model_train_start_t_d7650c_idx'), models.Index(fields=['model_type', 'status'], name='model_train_model_t_818efc_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='predictionhistory',
            index=models.Index(fields=['user', 'timestamp'], name='prediction__user_id_05eaf6_idx'),
        ),
        migrations.AddIndex(
            model_name='predictionhistory',
            index=models.Index(fields=['status', 'timestamp'], name='prediction__status_89d309_idx'),
        ),
        migrations.AddIndex(
            model_name='predictionhistory',
            index=models.Index(fields=['predicted_disease', 'status'], name='prediction__predict_f54a8f_idx'),
        ),
        migrations.AddIndex(
            model_name='predictionhistory',
            index=models.Index(fields=['confidence_score'], name='prediction__confide_a0341f_idx'),
        ),
        migrations.AddIndex(
            model_name='predictionfeedback',
            index=models.Index(fields=['prediction', 'feedback_type'], name='prediction__predict_9e31ee_idx'),
        ),
        migrations.AddIndex(
            model_name='predictionfeedback',
            index=models.Index(fields=['provided_by', 'timestamp'], name='prediction__provide_72abf9_idx'),
        ),
    ]
